import 'package:fam/domain/model/hc1_model.dart';
import 'package:fam/domain/model/hc6_model.dart';
import 'package:fam/domain/model/hc9_model.dart';
import 'package:flutter/material.dart';

import 'hc3_model.dart';
import 'hc5_model.dart';

///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class CardModelHcGroupsCardsCta {
/*
{
  "text": "Action",
  "type": "normal",
  "bg_color": "#000000",
  "is_circular": false,
  "is_secondary": false,
  "stroke_width": 0
}
*/

  String? text;
  String? type;
  String? bgColor;
  bool? isCircular;
  bool? isSecondary;
  int? strokeWidth;

  CardModelHcGroupsCardsCta({
    this.text,
    this.type,
    this.bgColor,
    this.isCircular,
    this.isSecondary,
    this.strokeWidth,
  });
  CardModelHcGroupsCardsCta.fromJson(Map<String, dynamic> json) {
    text = json['text']?.toString();
    type = json['type']?.toString();
    bgColor = json['bg_color']?.toString();
    isCircular = json['is_circular'];
    isSecondary = json['is_secondary'];
    strokeWidth = json['stroke_width']?.toInt();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['text'] = text;
    data['type'] = type;
    data['bg_color'] = bgColor;
    data['is_circular'] = isCircular;
    data['is_secondary'] = isSecondary;
    data['stroke_width'] = strokeWidth;
    return data;
  }
}

class CardModelHcGroupsCardsBgImage {
/*
{
  "image_type": "ext",
  "image_url": "https://westeros.r2.famapp.xyz/media/images/generic/ea55b045400042b1955a9a20201ffacb.png",
  "webp_image_url": "https://westeros.r2.famapp.xyz/media/images/generic/ea55b045400042b1955a9a20201ffacb.png.webp",
  "aspect_ratio": 0.9142857
}
*/

  String? imageType;
  String? imageUrl;
  String? webpImageUrl;
  double? aspectRatio;

  CardModelHcGroupsCardsBgImage({
    this.imageType,
    this.imageUrl,
    this.webpImageUrl,
    this.aspectRatio,
  });
  CardModelHcGroupsCardsBgImage.fromJson(Map<String, dynamic> json) {
    imageType = json['image_type']?.toString();
    imageUrl = json['image_url']?.toString();
    webpImageUrl = json['webp_image_url']?.toString();
    aspectRatio = json['aspect_ratio']?.toDouble();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['image_type'] = imageType;
    data['image_url'] = imageUrl;
    data['webp_image_url'] = webpImageUrl;
    data['aspect_ratio'] = aspectRatio;
    return data;
  }
}

class CardModelHcGroupsCardsFormattedTitleEntities {
/*
{
  "text": "Big display card",
  "type": "generic_text",
  "color": "#FBAF03",
  "font_size": 30,
  "font_style": "underline",
  "font_family": "met_semi_bold"
}
*/

  String? text;
  String? type;
  String? color;
  int? fontSize;
  String? fontStyle;
  String? fontFamily;

  CardModelHcGroupsCardsFormattedTitleEntities({
    this.text,
    this.type,
    this.color,
    this.fontSize,
    this.fontStyle,
    this.fontFamily,
  });
  CardModelHcGroupsCardsFormattedTitleEntities.fromJson(Map<String, dynamic> json) {
    text = json['text']?.toString();
    type = json['type']?.toString();
    color = json['color']?.toString();
    fontSize = json['font_size']?.toInt();
    fontStyle = json['font_style']?.toString();
    fontFamily = json['font_family']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['text'] = text;
    data['type'] = type;
    data['color'] = color;
    data['font_size'] = fontSize;
    data['font_style'] = fontStyle;
    data['font_family'] = fontFamily;
    return data;
  }
}

class CardModelHcGroupsCardsFormattedTitle {
/*
{
  "text": "{}\nwith action\n{}",
  "align": "left",
  "entities": [
    {
      "text": "Big display card",
      "type": "generic_text",
      "color": "#FBAF03",
      "font_size": 30,
      "font_style": "underline",
      "font_family": "met_semi_bold"
    }
  ]
}
*/

  String? text;
  String? align;
  List<CardModelHcGroupsCardsFormattedTitleEntities?>? entities;

  CardModelHcGroupsCardsFormattedTitle({
    this.text,
    this.align,
    this.entities,
  });
  CardModelHcGroupsCardsFormattedTitle.fromJson(Map<String, dynamic> json) {
    text = json['text']?.toString();
    align = json['align']?.toString();
    if (json['entities'] != null) {
      final v = json['entities'];
      final arr0 = <CardModelHcGroupsCardsFormattedTitleEntities>[];
      v.forEach((v) {
        arr0.add(CardModelHcGroupsCardsFormattedTitleEntities.fromJson(v));
      });
      entities = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['text'] = text;
    data['align'] = align;
    if (entities != null) {
      final v = entities;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['entities'] = arr0;
    }
    return data;
  }
}

class CardModelHcGroupsCards {
/*
{
  "id": 2,
  "name": "Test hcc",
  "slug": "Testhccwithaction",
  "title": "Big display card\nwith action\nThis is a sample text for the subtitle that you can add to contextual cards",
  "formatted_title": {
    "text": "{}\nwith action\n{}",
    "align": "left",
    "entities": [
      {
        "text": "Big display card",
        "type": "generic_text",
        "color": "#FBAF03",
        "font_size": 30,
        "font_style": "underline",
        "font_family": "met_semi_bold"
      }
    ]
  },
  "positional_images": [
    null
  ],
  "components": [
    null
  ],
  "url": "fp://fampay.in/pay/",
  "bg_image": {
    "image_type": "ext",
    "image_url": "https://westeros.r2.famapp.xyz/media/images/generic/ea55b045400042b1955a9a20201ffacb.png",
    "webp_image_url": "https://westeros.r2.famapp.xyz/media/images/generic/ea55b045400042b1955a9a20201ffacb.png.webp",
    "aspect_ratio": 0.9142857
  },
  "cta": [
    {
      "text": "Action",
      "type": "normal",
      "bg_color": "#000000",
      "is_circular": false,
      "is_secondary": false,
      "stroke_width": 0
    }
  ],
  "is_disabled": false,
  "is_shareable": false,
  "is_internal": false
}
*/

  int? id;
  String? name;
  String? slug;
  String? title;
  CardModelHcGroupsCardsFormattedTitle? formattedTitle;
  List<dynamic>? positionalImages;
  List<dynamic>? components;
  String? url;
  CardModelHcGroupsCardsBgImage? bgImage;
  List<CardModelHcGroupsCardsCta?>? cta;
  bool? isDisabled;
  bool? isShareable;
  bool? isInternal;

  CardModelHcGroupsCards({
    this.id,
    this.name,
    this.slug,
    this.title,
    this.formattedTitle,
    this.positionalImages,
    this.components,
    this.url,
    this.bgImage,
    this.cta,
    this.isDisabled,
    this.isShareable,
    this.isInternal,
  });
  CardModelHcGroupsCards.fromJson(Map<String, dynamic> json) {
    id = json['id']?.toInt();
    name = json['name']?.toString();
    slug = json['slug']?.toString();
    title = json['title']?.toString();
    formattedTitle = (json['formatted_title'] != null) ? CardModelHcGroupsCardsFormattedTitle.fromJson(json['formatted_title']) : null;
    url = json['url']?.toString();
    bgImage = (json['bg_image'] != null) ? CardModelHcGroupsCardsBgImage.fromJson(json['bg_image']) : null;
    if (json['cta'] != null) {
      final v = json['cta'];
      final arr0 = <CardModelHcGroupsCardsCta>[];
      v.forEach((v) {
        arr0.add(CardModelHcGroupsCardsCta.fromJson(v));
      });
      cta = arr0;
    }
    isDisabled = json['is_disabled'];
    isShareable = json['is_shareable'];
    isInternal = json['is_internal'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['name'] = name;
    data['slug'] = slug;
    data['title'] = title;
    if (formattedTitle != null) {
      data['formatted_title'] = formattedTitle!.toJson();
    }
    data['url'] = url;
    if (bgImage != null) {
      data['bg_image'] = bgImage!.toJson();
    }
    if (cta != null) {
      final v = cta;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['cta'] = arr0;
    }
    data['is_disabled'] = isDisabled;
    data['is_shareable'] = isShareable;
    data['is_internal'] = isInternal;
    return data;
  }
}

class CardModelHcGroups {
/*
{
  "id": 76,
  "name": "cardwithaction",
  "design_type": "HC3",
  "card_type": 1,
  "cards": [
    {
      "id": 2,
      "name": "Test hcc",
      "slug": "Testhccwithaction",
      "title": "Big display card\nwith action\nThis is a sample text for the subtitle that you can add to contextual cards",
      "formatted_title": {
        "text": "{}\nwith action\n{}",
        "align": "left",
        "entities": [
          {
            "text": "Big display card",
            "type": "generic_text",
            "color": "#FBAF03",
            "font_size": 30,
            "font_style": "underline",
            "font_family": "met_semi_bold"
          }
        ]
      },
      "positional_images": [
        null
      ],
      "components": [
        null
      ],
      "url": "fp://fampay.in/pay/",
      "bg_image": {
        "image_type": "ext",
        "image_url": "https://westeros.r2.famapp.xyz/media/images/generic/ea55b045400042b1955a9a20201ffacb.png",
        "webp_image_url": "https://westeros.r2.famapp.xyz/media/images/generic/ea55b045400042b1955a9a20201ffacb.png.webp",
        "aspect_ratio": 0.9142857
      },
      "cta": [
        {
          "text": "Action",
          "type": "normal",
          "bg_color": "#000000",
          "is_circular": false,
          "is_secondary": false,
          "stroke_width": 0
        }
      ],
      "is_disabled": false,
      "is_shareable": false,
      "is_internal": false
    }
  ],
  "is_scrollable": false,
  "height": 600,
  "is_full_width": false,
  "slug": "Cardwithaction",
  "level": 0
}
*/

  int? id;
  String? name;
  String? designType;
  int? cardType;
  List<CardModelHcGroupsCards?>? groupCards;
  bool? isScrollable;
  int? height;
  bool? isFullWidth;
  String? slug;
  int? level;

  CardModelHcGroups({
    this.id,
    this.name,
    this.designType,
    this.cardType,
    this.groupCards,
    this.isScrollable,
    this.height,
    this.isFullWidth,
    this.slug,
    this.level,
  });
  CardModelHcGroups.fromJson(Map<String, dynamic> json) {
    id = json['id']?.toInt();
    name = json['name']?.toString();
    designType = json['design_type']?.toString();
    cardType = json['card_type']?.toInt();
    if (json['cards'] != null) {
      final v = json['cards'];
      final arr0 = <CardModelHcGroupsCards>[];
      v.forEach((v) {
        arr0.add(CardModelHcGroupsCards.fromJson(v));
      });
      groupCards = arr0;
    }
    isScrollable = json['is_scrollable'];
    height = json['height']?.toInt();
    isFullWidth = json['is_full_width'];
    slug = json['slug']?.toString();
    level = json['level']?.toInt();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['name'] = name;
    data['design_type'] = designType;
    data['card_type'] = cardType;
    if (groupCards != null) {
      final v = groupCards;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['cards'] = arr0;
    }
    data['is_scrollable'] = isScrollable;
    data['height'] = height;
    data['is_full_width'] = isFullWidth;
    data['slug'] = slug;
    data['level'] = level;
    return data;
  }
}

class CardModel {
/*
{
  "id": 1,
  "slug": "famx-paypage",
  "title": null,
  "formatted_title": null,
  "description": null,
  "formatted_description": null,
  "assets": null,
  "hc_groups": [
    {
      "id": 76,
      "name": "cardwithaction",
      "design_type": "HC3",
      "card_type": 1,
      "cards": [
        {
          "id": 2,
          "name": "Test hcc",
          "slug": "Testhccwithaction",
          "title": "Big display card\nwith action\nThis is a sample text for the subtitle that you can add to contextual cards",
          "formatted_title": {
            "text": "{}\nwith action\n{}",
            "align": "left",
            "entities": [
              {
                "text": "Big display card",
                "type": "generic_text",
                "color": "#FBAF03",
                "font_size": 30,
                "font_style": "underline",
                "font_family": "met_semi_bold"
              }
            ]
          },
          "positional_images": [
            null
          ],
          "components": [
            null
          ],
          "url": "fp://fampay.in/pay/",
          "bg_image": {
            "image_type": "ext",
            "image_url": "https://westeros.r2.famapp.xyz/media/images/generic/ea55b045400042b1955a9a20201ffacb.png",
            "webp_image_url": "https://westeros.r2.famapp.xyz/media/images/generic/ea55b045400042b1955a9a20201ffacb.png.webp",
            "aspect_ratio": 0.9142857
          },
          "cta": [
            {
              "text": "Action",
              "type": "normal",
              "bg_color": "#000000",
              "is_circular": false,
              "is_secondary": false,
              "stroke_width": 0
            }
          ],
          "is_disabled": false,
          "is_shareable": false,
          "is_internal": false
        }
      ],
      "is_scrollable": false,
      "height": 600,
      "is_full_width": false,
      "slug": "Cardwithaction",
      "level": 0
    }
  ]
}
*/

  int? id;
  String? slug;
  String? title;
  String? formattedTitle;
  String? description;
  String? formattedDescription;
  String? assets;
  List<CardModelHcGroups?>? hcGroups;
  HC1? hc1Cards;
  HC3? hc3Cards;
  HC5? hc5Cards;
  HC6? hc6Cards;
  HC9? hc9Cards;

  CardModel({
    this.id,
    this.slug,
    this.title,
    this.formattedTitle,
    this.description,
    this.formattedDescription,
    this.assets,
    this.hcGroups,
    this.hc1Cards,
    this.hc3Cards,
    this.hc5Cards,
    this.hc9Cards,
    this.hc6Cards,
  });
  CardModel.fromJson(Map<String, dynamic> json) {
    id = json['id']?.toInt();
    slug = json['slug']?.toString();
    title = json['title']?.toString();
    formattedTitle = json['formatted_title']?.toString();
    description = json['description']?.toString();
    formattedDescription = json['formatted_description']?.toString();
    assets = json['assets']?.toString();
    if (json['hc_groups'] != null) {
      final v = json['hc_groups'];
      final arr0 = <CardModelHcGroups>[];
      v.forEach((v) {
        arr0.add(CardModelHcGroups.fromJson(v));
        if(v['design_type'] == "HC3"){
          hc3Cards = HC3.fromJson(v);
        }
        if(v['design_type'] == "HC5"){
          hc5Cards = HC5.fromJson(v);
        }
        if(v['design_type'] == "HC6"){
          hc6Cards = HC6.fromJson(v);
        }
        if(v['design_type'] == "HC9"){
          hc9Cards = HC9.fromJson(v);
        }
        if(v['design_type'] == "HC1"){
          hc1Cards = HC1.fromJson(v);
        }
      });
      hcGroups = arr0;
    }
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['slug'] = slug;
    data['title'] = title;
    data['formatted_title'] = formattedTitle;
    data['description'] = description;
    data['formatted_description'] = formattedDescription;
    data['assets'] = assets;
    if (hcGroups != null) {
      final v = hcGroups;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['hc_groups'] = arr0;
    }
    return data;
  }
}
